// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minibank.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Minibank.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220416063628_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Minibank.Data.Accounts.AccountDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("close_date");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text")
                        .HasColumnName("currency_code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric")
                        .HasColumnName("money");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("open_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_account_user_id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("Minibank.Data.Transfers.TransferDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text")
                        .HasColumnName("currency_code");

                    b.Property<int>("FromAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("from_account_id");

                    b.Property<decimal>("Money")
                        .HasColumnType("numeric")
                        .HasColumnName("money");

                    b.Property<int>("ToAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("to_account_id");

                    b.HasKey("Id")
                        .HasName("pk_transfer");

                    b.HasIndex("FromAccountId")
                        .HasDatabaseName("ix_transfer_from_account_id");

                    b.HasIndex("ToAccountId")
                        .HasDatabaseName("ix_transfer_to_account_id");

                    b.ToTable("transfer");
                });

            modelBuilder.Entity("Minibank.Data.Users.UserDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Minibank.Data.Accounts.AccountDbModel", b =>
                {
                    b.HasOne("Minibank.Data.Users.UserDbModel", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_account_user_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Minibank.Data.Transfers.TransferDbModel", b =>
                {
                    b.HasOne("Minibank.Data.Accounts.AccountDbModel", "FromAccount")
                        .WithMany()
                        .HasForeignKey("FromAccountId")
                        .HasConstraintName("fk_transfer_account_from_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minibank.Data.Accounts.AccountDbModel", "ToAccount")
                        .WithMany()
                        .HasForeignKey("ToAccountId")
                        .HasConstraintName("fk_transfer_account_to_account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("Minibank.Data.Users.UserDbModel", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
